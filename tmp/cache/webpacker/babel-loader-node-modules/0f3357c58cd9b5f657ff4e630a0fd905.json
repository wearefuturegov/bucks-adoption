{"ast":null,"code":"var _jsxFileName = \"/Users/chrisevans/Desktop/github/bucks-adoption/app/javascript/components/Maps/index.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from \"react\";\nimport { GoogleMap, LoadScriptNext, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport supportMarker from \"./support-marker.svg\";\nimport activeMarker from \"./active-marker.svg\";\nimport learningMarker from \"./learning-marker.svg\";\nimport culturalMarker from \"./cultural-marker.svg\";\nimport socialMarker from \"./social-marker.svg\";\nimport \"./style.scss\";\nimport mapStyles from \"./map-styles.json\";\nimport { truncate } from \"../../lib/utils\";\nimport Link from \"next/link\";\n\nvar markerIcon = function markerIcon(category) {\n  if (category === \"support\") return supportMarker;\n  if (category === \"active\") return activeMarker;\n  if (category === \"learning\") return learningMarker;\n  if (category === \"cultural\") return culturalMarker;\n  if (category === \"social\") return socialMarker;\n};\n\nvar ServiceMarker = function ServiceMarker(_ref) {\n  var service = _ref.service,\n      clusterer = _ref.clusterer,\n      activeMarker = _ref.activeMarker,\n      changeActiveMarker = _ref.changeActiveMarker;\n  var position = {\n    lat: service.geo.coordinates[1] + service.assetId / 1500000,\n    lng: service.geo.coordinates[0] + service.assetId / 1500000\n  };\n  return React.createElement(React.Fragment, null, React.createElement(Marker, {\n    position: position,\n    clusterer: clusterer,\n    icon: {\n      url: markerIcon(service.category),\n      optimized: false,\n      scaledSize: new window.google.maps.Size(40, 40)\n    },\n    onClick: function onClick() {\n      changeActiveMarker(service.assetId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), service.assetId === activeMarker && React.createElement(InfoWindow, {\n    position: position,\n    onCloseClick: function onCloseClick() {\n      changeActiveMarker(0);\n    },\n    options: {\n      maxWidth: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, service.name || service.parentOrganisation), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, truncate(service.description, 15)), React.createElement(Link, {\n    href: \"/service/\".concat(service.assetId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"See details\")))));\n};\n\nvar ServiceClusterer = function ServiceClusterer(_ref2) {\n  var services = _ref2.services,\n      activeMarker = _ref2.activeMarker,\n      changeActiveMarker = _ref2.changeActiveMarker;\n  return React.createElement(MarkerClusterer, {\n    options: {\n      imagePath: \"/static/m\"\n    },\n    minimumClusterSize: 3,\n    zoomOnClick: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, function (clusterer) {\n    return services.map(function (service, i) {\n      return React.createElement(ServiceMarker, {\n        key: i,\n        service: service,\n        clusterer: clusterer,\n        activeMarker: activeMarker,\n        changeActiveMarker: changeActiveMarker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    });\n  });\n};\n\nvar WrappedMap = function WrappedMap(_ref3) {\n  var lat = _ref3.lat,\n      lng = _ref3.lng,\n      services = _ref3.services;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeMarker = _useState2[0],\n      changeActiveMarker = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(LoadScriptNext, {\n    id: \"script-loader\",\n    googleMapsApiKey: process.env.GOOGLE_CLIENT_KEY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(GoogleMap, {\n    options: {\n      mapTypeControl: false,\n      streetViewControl: false,\n      styles: mapStyles\n    },\n    key: new Date(),\n    zoom: 12,\n    center: {\n      lat: lat,\n      lng: lng\n    },\n    mapContainerClassName: \"list-map\",\n    onLoad: function onLoad(map) {\n      var bounds = new window.google.maps.LatLngBounds();\n      services.map(function (service) {\n        bounds.extend(new window.google.maps.LatLng(service.geo.coordinates[1], service.geo.coordinates[0]));\n      });\n      map.fitBounds(bounds);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(ServiceClusterer, {\n    activeMarker: activeMarker,\n    changeActiveMarker: changeActiveMarker,\n    services: services,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }))));\n};\n\nexport default WrappedMap;","map":{"version":3,"sources":["/Users/chrisevans/Desktop/github/bucks-adoption/app/javascript/components/Maps/index.jsx"],"names":["React","useState","GoogleMap","LoadScriptNext","Marker","InfoWindow","MarkerClusterer","supportMarker","activeMarker","learningMarker","culturalMarker","socialMarker","mapStyles","truncate","Link","markerIcon","category","ServiceMarker","service","clusterer","changeActiveMarker","position","lat","geo","coordinates","assetId","lng","url","optimized","scaledSize","window","google","maps","Size","maxWidth","name","parentOrganisation","description","ServiceClusterer","services","imagePath","map","i","WrappedMap","process","env","GOOGLE_CLIENT_KEY","mapTypeControl","streetViewControl","styles","Date","bounds","LatLngBounds","extend","LatLng","fitBounds"],"mappings":"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","sourcesContent":["import React, { useState} from \"react\"\nimport { GoogleMap, LoadScriptNext, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\"\nimport supportMarker from \"./support-marker.svg\"\nimport activeMarker from \"./active-marker.svg\"\nimport learningMarker from \"./learning-marker.svg\"\nimport culturalMarker from \"./cultural-marker.svg\"\nimport socialMarker from \"./social-marker.svg\"\nimport \"./style.scss\"\nimport mapStyles from \"./map-styles.json\"\nimport { truncate } from \"../../lib/utils\"\nimport Link from \"next/link\"\n\nconst markerIcon = (category) => {\n    if (category === \"support\") return supportMarker\n    if (category === \"active\") return activeMarker\n    if (category === \"learning\") return learningMarker\n    if (category === \"cultural\") return culturalMarker\n    if (category === \"social\") return socialMarker\n}\n\nconst ServiceMarker = ({service, clusterer, activeMarker, changeActiveMarker}) => {\n    let position = {\n        lat: service.geo.coordinates[1] + (service.assetId/1500000),\n        lng: service.geo.coordinates[0] + (service.assetId/1500000)\n    }\n    return(\n        <>\n            <Marker\n                position={position}\n                clusterer={clusterer}\n                icon={{\n                    url: markerIcon(service.category),\n                    optimized: false,\n                    scaledSize: new window.google.maps.Size(40, 40),\n                }}\n                onClick={()=>{changeActiveMarker(service.assetId)}}\n            />\n            {(service.assetId === activeMarker) && \n                <InfoWindow\n                    position={position}\n                    onCloseClick={()=>{changeActiveMarker(0)}}\n                    options={{maxWidth: 300}}\n                >\n                    <>\n                        <h1>{service.name || service.parentOrganisation}</h1>\n                        <p>{truncate(service.description, 15)}</p>\n                        <Link href={`/service/${service.assetId}`}>\n                            <a>See details</a>\n                        </Link>\n                    </>\n                </InfoWindow>\n            }\n        </>\n    )\n}\n\nconst ServiceClusterer = ({services, activeMarker, changeActiveMarker}) => {\n    return(\n        <MarkerClusterer \n            options={{imagePath: \"/static/m\"}} minimumClusterSize={3}\n            zoomOnClick={false}\n        >\n            {\n                (clusterer) => \n                    services.map((service, i)=>\n                        <ServiceMarker \n                            key={i} \n                            service={service} \n                            clusterer={clusterer}\n                            activeMarker={activeMarker} \n                            changeActiveMarker={changeActiveMarker} \n                        />\n                    )\n            }\n        </MarkerClusterer>\n    )\n}\n\n\n\nconst WrappedMap = ({lat, lng, services})=> {\n    const [activeMarker, changeActiveMarker] = useState(0)\n    return(\n        <>\n            <LoadScriptNext\n                id=\"script-loader\"\n                googleMapsApiKey={process.env.GOOGLE_CLIENT_KEY}\n            >\n                <GoogleMap \n                    options={{\n                        mapTypeControl: false,\n                        streetViewControl: false,\n                        styles: mapStyles\n                    }}\n                    key={new Date()}\n                    zoom={12} \n                    center={{\n                        lat: lat, \n                        lng: lng\n                    }}\n                    mapContainerClassName=\"list-map\"\n                    onLoad={map => {\n                        const bounds = new window.google.maps.LatLngBounds()\n                        services.map(service => {\n                            bounds.extend(new window.google.maps.LatLng(\n                                service.geo.coordinates[1],\n                                service.geo.coordinates[0]\n                            ))\n                        })\n                        map.fitBounds(bounds)\n                    }}\n                >\n                    <ServiceClusterer activeMarker={activeMarker} changeActiveMarker={changeActiveMarker} services={services}/>\n                </GoogleMap>\n            </LoadScriptNext>\n        </>\n    )\n}\n\nexport default WrappedMap"]},"metadata":{},"sourceType":"module"}